
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id       Int      @id @default(autoincrement())
  name     String?  // from Google you can download the name, it is not required
  email    String   @unique
  emailVerified  DateTime?
  image    String?  // url to the avatar from Google
  role     String   @default("user") // : "user" | "admin"
  accounts Account[] // NextAuth
  sessions Session[] // NextAuth
  clients  Client[]
}

model Client {
  id         Int       @id @default(autoincrement())
  name       String
  address    String?
  logoBlob   Bytes?
  logoType   String?
  createdAt  DateTime  @default(now())
  industry   Industry? @relation(fields: [industryId], references: [id])
  industryId Int?
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
}

model Industry {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  clients Client[]
}

// MODELS NextAuth
model Account {
  id                 Int       @id @default(autoincrement())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User      @relation(fields: [userId], references: [id])
  @@unique([provider, providerAccountId])
}

model Session {
  id           Int       @id @default(autoincrement())
  sessionToken String    @unique
  userId       Int
  expires      DateTime
  user         User      @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
